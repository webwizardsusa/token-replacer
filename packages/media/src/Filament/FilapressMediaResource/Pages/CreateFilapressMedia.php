<?php

namespace Filapress\Media\Filament\FilapressMediaResource\Pages;

use Filament\Facades\Filament;
use Filament\Forms\Components\Select;
use Filament\Resources\Pages\CreateRecord;
use Filapress\Media\Filament\FilapressMediaResource;
use Filapress\Media\MediaCollection;
use Filapress\Media\MediaCollections;
use Filapress\Media\MediaType;
use Filapress\Media\MediaTypes;
use Illuminate\Database\Eloquent\Model;

class CreateFilapressMedia extends CreateRecord
{
    protected static string $resource = FilapressMediaResource::class;

    public string $type;

    public function mount(?string $type = null): void
    {
        abort_if(! $type || ! app(MediaTypes::class)->has($type), 404);
        $this->type = $type;
        parent::mount(); // TODO: Change the autogenerated stub
    }

    protected function authorizeAccess(): void
    {
        abort_unless($this->getType()->canCreate(), 403);
    }

    protected function getHeaderActions(): array
    {
        return [

        ];
    }

    public function getType(): MediaType
    {
        return app(MediaTypes::class)->get($this->type);
    }

    protected function getForms(): array
    {
        $form = $this->makeForm()
            ->operation('create')
            ->model($this->getModel())
            ->statePath($this->getFormStatePath())
            ->columns($this->hasInlineLabels() ? 1 : 2)
            ->inlineLabel($this->hasInlineLabels());

        $schema = $this->getType()->form($form);

        $collections = collect(app(MediaCollections::class)->all())
            ->filter(fn(MediaCollection $type) => $type->canCreate())
            ->mapWithKeys(fn(MediaCollection $type) => [$type->name() => $type->label()])
            ->toArray();
        if (!empty($collections)) {
            $schema[] = Select::make('collection')
                ->options($collections);
        }
        $form->schema($schema);

        return [
            'form' => $this->form($form),
        ];
    }

    protected function handleRecordCreation(array $data): Model
    {
        $record = $this->getType()->create($data);
        if (
            static::getResource()::isScopedToTenant() &&
            ($tenant = Filament::getTenant())
        ) {
            return $this->associateRecordWithTenant($record, $tenant);
        }

        $record->save();
        return $record;
    }
}
